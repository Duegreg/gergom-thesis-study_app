type User {
    id: ID!
    code: String!
    name: String!
    studentGroups: [Group]
    teacherGroups: [Group]
    followedStudents: [User]
    userTestStatuses: [UserTestStatuses]
}

type Group {
    id: ID!
    code: String!
    name: String!
    description: String
    news: String
    newsChangedDate: String
    students: [User]
    teachers: [User]
    tests: [Test]
}

type Test {
    id: ID!
    name: String!
    description: String
    testTasks: [TestTask]
    userTestStatuses: [UserTestStatuses]
    group: Group!
}

type UserTestStatuses {
    id: ID!
    test: Test!
    user: User!
    status: String!
    statusChangedTime: String!
    correctAnswers: Int!
    allAnswers: Int!
}

type Task {
    id: ID!
    usage: Int!
    question: String!
    answers: [TaskAnswer]!
    solutionNumber: Int!
}

type TaskAnswer {
    number: Int!
    answer: String!
}

type TaskSolution {
    chosenAnswerNumber: Int!
    solutionNumber: Int!
    allAnswers: Int!
    correctAnswers: Int!
    answeredTasks: Int!
    allTasks: Int!
}

type TaskSearchResult {
    totalPages: Int!
    totalElements: Int!
    tasks: [Task]!
}

type TestTask {
    id: ID!
    level: Int!
    task: Task!
}

input TestTaskInput {
    id: ID!
    level: Int!
}

input TaskInput {
    question: String!
    correctAnswer: String!
    incorrectAnswers: [String!]!
}

input NameDescInput {
    name: String!
    description: String!
}